*Meal*
- все что связано в id не дублируем, т.е. надо убрать то,что уже есть в AbstractBaseEntity

*InMemoryUserRepositoryImpl/InMemoryMealRepositoryImpl*
- статик поля в классе располагаем перед нестатик

*InMemoryMealRepositoryImpl*
- подумай, возможно стоит изменить структуру данных, чтобы было проще доставать еду по userId Данных может быть очень много, и все перебирать все для поиска по userId может быть достаточно долго
> 2.1: В Meal, которая приходит в контроллер нет никакой информации о пользователе (еда приходит в контроллер БЕЗ user/userId). Она может быть только авторизованного пользователя, поэтому что-то сравнивать с ним никакого смысла нет. По id еды и авторизованному пользователю нужно проверить ее принадлежность. *Проверьте сценарий: авторизованный пользователь пробует изменить чужую еду (id еды ему не принадлежит).*
- save, данная проверка не имеет смысла `meal.getUserId().equals(userId)`  ты сравниваешь входящие данные с входящими, и те и другие сама устанавливаешь (потестируй в SpringMain), см мой пример про Васю в конце урока

*MealServiceImpl /MealService*
- см как реализовано для юзера и сделай по аналогии, для save не нужна проверка, а для апдейт нужна

*MealRestController*
- добавь проверки по аналогии с AbstractUserController
- save, верни meal

*MealServlet*
> 2.1: В Meal, которая приходит в контроллер нет никакой информации о пользователе ( *еда приходит в контроллер БЕЗ user/userId* ).
- в сервлете ничего не известно про userId, т.е null